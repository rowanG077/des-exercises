
Group:
  Stefan Schrijvers(S4784081) and Rowan Goemans(S4375238)

IMPORTANT:

   While we were working on the assignments we encountered an annoying bug.
   Sometimes our implementation deadlocks. We spent several hours debugging to
   find out the reason. Eventually we discovered that sometimes the first call
   to read() (required for interrupts from the light sensor) never returns, even
   if the light sensor detects light. We have made a minimal example which
   simply creates a Xenomai task and performs a *single* read() call. It prints
   a text string before and after this read() call. Using this minimal example
   we were able to reproduce the issue on several raspberry pi setups. This
   minimal example has been sent to the professor Jozef Hooman. Furthermore, we
   have also been able to reproduce the same issue with the given 'draw_x'
   binary.  We have also asked some classmates to try and reproduce this issue
   with their solution and have found that it occurs for theirs as well. Because
   of this the programs given below might sometimes not show anything. If this
   happens you can send a SIGINT with CTRL-C and restart the program.

ex09a:
    Description

    Our implementation for 9a generates a csv file '09a.csv' that contains the
    requested information. For the assignment we ran the program twice; once for
    the motor on 'slow' speed and once on the 'fast' speed. The files
    09a_fast.csv and 09a_slow.csv contain the results. Each file contains three
    columns. The first column indicates the measurement number, the second the
    time for one rotation in nanoseconds, and the third column contains the time
    it takes to pass the light sensor in nanoseconds. From the results we can
    see that the 'fast' speed is about 28% faster than the 'slow' speed. The
    results are summarized below:

    Slow speed:
        Average cycle time: 123511892 nanoseconds
        Average rotation per minute: 489
        Average time to pass sensor: 1010774 nanoseconds

    Fast speed
        Average cycle time: 95819797 nanoseconds
        Average rotation per minute: 626
        Average time to pass sensor: 786126 nanoseconds

ex09b:
ex09c:
ex09d:
    Description

    Our implementation for assignments 9b, 9c, and 9d are all very similar. The
    implementation uses two tasks. The first task measures the disk's rotation
    speed. Ever time the light sensor triggers an interrupt the task computes
    the disk period by comparing the last interrupt time to the time of the
    current interrupt. In our implementation we view the disk at intervals of
    tenths of degrees. We then view a certain amount of tenths of degrees as a
    single pixel. By modifying this value we can make the characters appear
    wider or thinner. Each character in turn is represented as a set of pixels.
    The measure task also computes how many nanoseconds there are per tenths of
    degrees based on the currently measured disk period.

    The second task takes care of drawing. It first calculates at which degrees
    it should draw the columns for a character. This is based upon the
    configuration mentioned above. After calculating this the task goes into a
    loop where it calculates the current position of the LED column based on the
    information gathered by the first task. It does this by looking at the
    'nanoseconds per tenths of degrees' mentioned above and by looking at the
    time since the last light sensor interrupt. It then checks if the current
    position is one where it should set the LED columns to some value and, if it
    is, sets them. The measurement task has the highest priority and the draw
    task the lowest.

    The only difference between our implementation of 9b and 9c is the position
    where it draws the X.

    For 9d we add another task. This third task has a priority lower than the
    measurement task but higher than the draw task. The task is responsible for
    updating the location where the character should be drawn. It does this by
    executing the task on a set period.

ex09e:
    Description

    Exercise 9e is in a sub-directory called 'ex09e' in order to make the
    structure a bit clearer. The directory contains our source file ex09e.c and
    the files listed on the course website. The implementation is similar to 9d
    except that we now write a rotating text string. In this case it draws the
    text "hello". Since our implementation in ex09d already used the same
    encoding for characters we had to change very little in order to draw a full
    string of characters.
