grammar ev3.behaviours.DSL with org.eclipse.xtext.common.Terminals

// next needed because of Ecore type EBoolean used
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate ev3DSL "http://www.ev3.behaviours/DSL"

Missions:
	'Missions'
	name = ID
	missions += Mission+
;

Mission:
	'Mission'
	name = ID
	behaviours += Behaviour+
;

Behaviour:
	'Behaviour'
	name = ID
	('InitialState:' states += SetStatement+)?
	'Priority:' prio = INT
	'When:' when = BooleanExpression
	'Do:' do = Block
;

Block:
	statements += Statement+
;

Statement:
	Conditional    |
	DriveStatement |
	TurnStatement  |
	SetStatement   |
	WaitStatement  |
	ProbeStatement |
	StopStatement  |
	WhileStatement
;

Conditional:
	'if' condition = BooleanExpression 'then'
		block = Block
	(elseifs += ElseIfConditional)*
	('else'
		elseBlock = Block
	)?
	'end'
;

ElseIfConditional:
	'elseif' condition = BooleanExpression 'then'
		block = Block
;

WhileStatement:
	'while' condition = BooleanExpression 'do'
		block = Block
	'end'
;

DriveStatement:
	'drive' direction = DriveDirection 'at' speed = INT '%' 'speed' withStatement = DriveWith? forStatement = DriveFor?
;

DriveWith:
	'with' 'turn' turnSpeed = INT '%' turnDirection = TurnDirection
;

DriveFor:
	'for' duration = INT 'seconds'
;

TurnStatement:
	'turn' degrees = INT 'degrees' direction = TurnDirection
;

SetStatement:
	variable = ID '=' value = Boolean
;

WaitStatement:
	'wait' duration = INT 'seconds'
;

ProbeStatement:
	{ProbeStatement} 'probe'
;

StopStatement:
	{StopStatement} 'stop'
;

enum DriveDirection:
    FORWARD   = 'forward' |
    BACKWARD = 'backward'
;

enum TurnDirection:
    LEFT  = 'left' |
    RIGHT = 'right'
;

BooleanExpression:
    BooleanExpressionLevelOr
;

BooleanExpressionLevelOr returns BooleanExpression:
    BooleanExpressionLevelAnd ({BooleanExpressionLevelOr.left=current} 'Or' right = BooleanExpressionLevelAnd)*
;

BooleanExpressionLevelAnd returns BooleanExpression:
    BooleanExpressionLevelNot ({BooleanExpressionLevelAnd.left=current} 'And' right = BooleanExpressionLevelNot)*
;

BooleanExpressionLevelNot returns BooleanExpression:
	NotExpression |
	BooleanExpressionFin
;

NotExpression:
	"Not" expr = BooleanExpressionFin
;

BooleanExpressionFin returns BooleanExpression:
    SensorReading      |
    Variable           |
    BooleanBracket
;

BooleanBracket:
    '(' sub = BooleanExpression ')'
;

SensorReading:
	ColorSensorReading | UltrasonicSensorReading | TouchSensorReading
;

ColorSensorReading:
	'ColorSensorReading' side = ColorSensorSide 'Is' color = Colors
;

UltrasonicSensorReading:
	'UltrasonicSensorReading' side = UltrasonicSensorSide op = CompareOperator distance = INT 'cm'
;

TouchSensorReading:
	'TouchSensorReading' side = TouchSensorSide
;

enum TouchSensorSide:
	LEFT  = 'left'  |
	RIGHT = 'right' |
	BACK  = 'back'  |
	ANY   = 'any'
;

enum ColorSensorSide:
	LEFT   = 'left'   |
	RIGHT  = 'right'  |
	MIDDLE = 'middle' |
	ANY    = 'any'
;

enum UltrasonicSensorSide:
	FRONT = 'front' |
	BACK  = 'back'
;

Variable:
	variable = ID
;

enum Colors:
    RED    = 'Red'    |
    BLUE   = 'Blue'   |
    YELLOW = 'Yellow' |
    BLACK  = 'Black'  |
    WHITE  = 'White'
;

enum CompareOperator:
    EQ  = '==' |
    NEQ = '!=' |
    LE  = '<=' |
    GE  = '>=' |
    L   = '<'  |
    G   = '>'
;

enum Boolean:
	TRUE  = 'True'  |
	FALSE = 'False'
;
